#!/usr/bin/python
# -*- coding: utf-8 -*-
######################################################################
# * $Id: 
# * $Revision:  $
# * $Date: 2012-10-16 11:26:23 +0200 (Tue, 16 Oct 2012) $
# * Created By: ldo
######################################################################
# V1.0 - Display Temperature and Wind on the papirus
# V1.1 - Added a sign to indicate whenever measure is old (HaveTimeout)
# V1.2 - Added GPIO monitor to switch display mode
# V1.3 - Added trend indicators
# V1.4 - Adjusted Display
######################################################################

import json
import requests
from requests.auth import HTTPBasicAuth

import os
import sys
import time
from datetime import datetime,timedelta
from papirus import Papirus
from papirus import PapirusComposite
from papirus import PapirusTextPos
from PIL import Image
from PIL import ImageDraw
from PIL import ImageFont

import RPi.GPIO as GPIO

import logging

from string import Template
import ConfigParser
############# Init ################################## 
user = os.getuid()
if user != 0:
    print "Please run script as root"
    sys.exit()

SW1 = 16
SW2 = 26
SW3 = 20
SW4 = 21

# Initialize Papirus (global)

papirus = Papirus()

chronoend = datetime.now()

############# Parameters ################################## 
# a simple function to read an array of configuration files into a config object
def read_config(cfg_files):
    if(cfg_files != None):
        config = ConfigParser.RawConfigParser()

        # merges all files into a single config
        for i, cfg_file in enumerate(cfg_files):
            if(os.path.exists(cfg_file)):
                config.read(cfg_file)

        return config
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Domoticz parameters
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
config = read_config(['/etc/domoticz/domoticz.properties'])

if(config == None):
 	print ".properties file missing !" 
	exit 

# Connection Info
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
dz_ip= config.get('global','dz_ip')
dz_port= config.get('global','dz_port')
dz_user= config.get('global','dz_user')
dz_password= config.get('global','dz_password')

# IDX of the Virtual Sensors
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#Temperature
dz_text_idx=config.get('global','dz_text_idx')
dz_ttv_idx=config.get('global','dz_ttv_idx')
dz_tgrenier_idx=config.get('global','dz_tgrenier_idx')
dz_tchbrnono_idx=config.get('global','dz_tchbrnono_idx')
dz_tsalon_idx=config.get('global','dz_tsalon_idx')
dz_tdouche_idx=config.get('global','dz_tdouche_idx')
#Wind
dz_piou178_idx=config.get('global','dz_piou178_idx')
dz_piou378_idx=config.get('global','dz_piou378_idx')
#Switch
dz_sprinter_idx=config.get('global','dz_sprinter_idx')
dz_slaptop_idx=config.get('global','dz_slaptop_idx')
dz_sdesktop_idx=config.get('global','dz_sdesktop_idx')
dz_sipod_idx=config.get('global','dz_sipod_idx')
dz_smobile_idx=config.get('global','dz_smobile_idx')

# Variables
dz_showerStarted_idx=config.get('global','dz_showerStarted_idx')

# directories
img_folder=config.get('global','img_folder')
##################  ENd of Parameters ######################

### Request domoticz api server to get data for the given device 
headers = {
    'User-Agent': 'Mozilla/5.0',
}

##################  Initalialize values for trending ######################
pexter = 0
ptv = 0
pgrenier = 0
pchbrnono = 0
psalon = 0
pddouche = 0
pdouche = 0
phdouche = 0
########### Domoticz Virtual Widget  FUNCTION ########

def upd_variable (var,val):

    # /json.htm?type=command&param=updateuservariable&vname=USERVARIABLENAME&vtype=USERVARIABLETYPE&vvalue=USERVARIABLEVALUE
    if  r.status_code != 200:
        print "Error ("+str(r.status_code)+") sending data to Domoticz API using request: "+dz_request
        
###### END DOmoticz Virtual Widget update FUNCTION ########
     
def get_temp (idx,prev_value):
    # domoticz URL to get value from a device:
    # https://server/json.htm?type=devices&rid=20
    # see https://www.domoticz.com/wiki/Domoticz_API/

    json_url_text='/json.htm?type=devices&rid='

    dz_request='http://'+dz_ip+':'+dz_port+json_url_text+idx

    r=requests.get(dz_request,auth=HTTPBasicAuth(dz_user,dz_password))

    status=r.status_code
    if status == 200:
    # API send 200 if everything is OK
        response=r.json()
        temp_value=response['result'][0]['Temp']
        if temp_value > prev_value:
            trend_str='+'
        elif temp_value < prev_value:
            trend_str='-'
        else:
            trend_str=''

        temp_valid=response['result'][0]['HaveTimeout']
        if temp_valid:
          return str(temp_value)+u'\u00B0'+ ' (!)',temp_value,''
        else:
          return str(temp_value)+u'\u00B0',temp_value,trend_str
    else:
        print "Error ("+str(status)+") reading data from Domoticz API using request: "+dz_request
        return 'ER-PD-001',-1,''

def get_hum (idx,prev_value):
    # domoticz URL to get value from a device:
    # https://server/json.htm?type=devices&rid=20
    # see https://www.domoticz.com/wiki/Domoticz_API/

    json_url_text='/json.htm?type=devices&rid='

    dz_request='http://'+dz_ip+':'+dz_port+json_url_text+idx

    r=requests.get(dz_request,auth=HTTPBasicAuth(dz_user,dz_password))

    status=r.status_code
    if status == 200:
    # API send 200 if everything is OK
        response=r.json()
        temp_value=response['result'][0]['Humidity']
        if temp_value > prev_value:
            trend_str='+'
        elif temp_value < prev_value:
            trend_str='-'
        else:
            trend_str=''

        temp_valid=response['result'][0]['HaveTimeout']
        if temp_valid:
          return str(temp_value)+u'\u0025'+ ' (!)',temp_value,trend_str
        else:
          return str(temp_value)+u'\u0025'+trend_str,temp_value,trend_str
    else:
        print "Error ("+str(status)+") reading data from Domoticz API using request: "+dz_request
        return 'ER-PD-003',-1

def get_wind (idx):
    # domoticz URL to get value from a device:
    # https://server/json.htm?type=devices&rid=20
    # see https://www.domoticz.com/wiki/Domoticz_API/

    json_url_text='/json.htm?type=devices&rid='

    dz_request='http://'+dz_ip+':'+dz_port+json_url_text+idx

    r=requests.get(dz_request,auth=HTTPBasicAuth(dz_user,dz_password))

    status=r.status_code
    if status == 200:
    # API send 200 if everything is OK
        response=r.json()
        speed_str=response['result'][0]['Speed']
        dir_str=response['result'][0]['DirectionStr']
        max_str=response['result'][0]['Gust']
        wind_str=str(speed_str)
        windmax_str=str(max_str)
        
        wind_valid=response['result'][0]['HaveTimeout']
        if wind_valid:
            return wind_str,windmax_str,'(!)'
        else:
            return wind_str,windmax_str,dir_str
    else:
        print "Error ("+str(status)+") reading data from Domoticz API using request: "+pi_request
        return 'ER-PD-003','ER-PD_003'
        
def get_switch (idx):
    # domoticz URL to get value from a device:
    # https://server/json.htm?type=devices&rid=20
    # see https://www.domoticz.com/wiki/Domoticz_API/

    json_url_text='/json.htm?type=devices&rid='

    dz_request='http://'+dz_ip+':'+dz_port+json_url_text+idx

    r=requests.get(dz_request,auth=HTTPBasicAuth(dz_user,dz_password))

    status=r.status_code
    if status == 200:
    # API send 200 if everything is OK
        response=r.json()
        # LastUpdate: "2017-05-03 20:21:05"
        last_update_str=response['result'][0]['LastUpdate']
        status=response['result'][0]['Status']
        # process time difference since last update
        td = datetime.now() - datetime.strptime(last_update_str, '%Y-%m-%d %H:%M:%S')
        last_update=datetime.strptime(last_update_str, '%Y-%m-%d %H:%M:%S')
        return status,last_update,td
    else:
        print "Error ("+str(status)+") reading data from Domoticz API using request: "+pi_request
        return 'ER-PD-004','ER-PD_004'
        
def get_var (idx):
    # domoticz URL to get user variable value:
    # https://server/json.htm?type=command&param=getuservariable&idx=11

    json_url_text='/json.htm?type=command&param=getuservariable&idx='

    dz_request='http://'+dz_ip+':'+dz_port+json_url_text+idx

    r=requests.get(dz_request,auth=HTTPBasicAuth(dz_user,dz_password))

    status=r.status_code
    if status == 200:
    # API send 200 if everything is OK
        response=r.json()
        var_value=response['result'][0]['Value']
        return str(var_value)
    else:
        print "Error ("+str(status)+") reading data from Domoticz API using request: "+dz_request
        return 'ER-PD-004'

class DeltaTemplate(Template):
    delimiter = "%"

def strfdelta(tdelta, fmt):
    d = {"D": tdelta.days}
    hours, rem = divmod(tdelta.seconds, 3600)
    minutes, seconds = divmod(rem, 60)
    d["H"] = '{:02d}'.format(hours)
    d["M"] = '{:02d}'.format(minutes)
    d["S"] = '{:02d}'.format(seconds)
    t = DeltaTemplate(fmt)
    return t.substitute(**d)

## ------------------------------------------------------------------------------
## Screen refresh function for Mode 1 to 3 (Main & Temperature)   

def refresh_screen1_3(type,mode):
    global pexter 
    global ptv 
    global pgrenier
    global pchbrnono 
    global psalon 
    global pdouche 
    global phdouche 

    # screen size is 264 x 176

    # Get latest values from Domoticz
    val_text,texter,trend_text = get_temp(dz_text_idx,pexter)
    pexter = texter
    val_ttv,ttv,trend_ttv = get_temp(dz_ttv_idx,ptv)
    ptv = ttv
    val_tsalon,tsalon,trend_tsalon = get_temp(dz_tsalon_idx,psalon)
    psalon = tsalon
    val_tgrenier,tgrenier,trend_tgrenier = get_temp(dz_tgrenier_idx,pgrenier)
    pgrenier = tgrenier
    val_tdouche,tdouche,trend_tdouche = get_temp(dz_tdouche_idx,pdouche)
    pdouche = tdouche
    val_hdouche,hdouche,trend_hdouche = get_hum(dz_tdouche_idx,phdouche)
    phdouche = hdouche
    val_tchbrnono,tchbrnono,trend_tchbrnono = get_temp(dz_tchbrnono_idx,pchbrnono)
    pchbrnono = tchbrnono
    val_wcoynelle,val_wcoymax,val_wcoydirec = get_wind(dz_piou178_idx)

    font_path = "/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf"
    font_xbig = ImageFont.truetype(font_path, 50)
    font_38 = ImageFont.truetype(font_path, 38)
    font_36 = ImageFont.truetype(font_path, 36)
    font_26 = ImageFont.truetype(font_path, 26)
    font_sbig = ImageFont.truetype(font_path, 34)
    font_big = ImageFont.truetype(font_path, 30)
    font_xtitle = ImageFont.truetype(font_path, 25)
    font_title = ImageFont.truetype(font_path, 20)
    font_values = ImageFont.truetype(font_path, 16)
    font_small = ImageFont.truetype(font_path, 12)

    now = datetime.now().strftime('%d %b %H:%M')
    strtime = datetime.now().strftime('%H:%M')

    #  Main - Temp Ext + Time + Wind
    if mode == 1:
        image = Image.new('1', papirus.size, 1)
        draw = ImageDraw.Draw(image)
        draw.text( (10, 5) , val_text, font=font_xbig, fill=0)
        draw.text( (85, 85) , val_wcoymax, font=font_sbig,fill=0)
        draw.text( (170, 89) , 'km/h', font=font_xtitle,fill=0)
        draw.text( (155, 141) ,strtime , font=font_sbig, fill=0)

        winddirimage = Image.open(img_folder+val_wcoydirec+'.png')
        image.paste(winddirimage,(0,80))  

        clockimage = Image.open(img_folder+'clock.png')
        image.paste(clockimage,(101,128))  

        if trend_text == '-':
             trendimage = Image.open(img_folder+'arrow-down-lite.png')
             image.paste(trendimage,(166,0))  
        elif trend_text == '+':
             trendimage = Image.open(img_folder+'arrow-up-lite.png')
             image.paste(trendimage,(166,0))  

        papirus.display(image)

    elif mode == 2:
        image = Image.open(img_folder+'home-diff.png')
        draw = ImageDraw.Draw(image)

        if trend_text == '-':
             trendimage = Image.open(img_folder+'arrow-down.png')
             image.paste(trendimage,(19,45))  
        elif trend_text == '+':
             trendimage = Image.open(img_folder+'arrow-up.png')
             image.paste(trendimage,(19,45))  


        draw.text( (1,137) ,str(texter)+u'\u00B0',font=font_38,fill=0)

        diffsalon=tsalon-texter
        draw.text( (152,137) ,str(diffsalon)+u'\u00B0',font=font_sbig,fill=0)
        difftv=ttv-texter
        draw.text( (152,99) ,str(difftv)+u'\u00B0',font=font_sbig,fill=0)
        diffgre=tgrenier-texter
        draw.text( (126,67) ,str(diffgre)+u'\u00B0',font=font_xtitle,fill=0)
        if diffgre<0:
            draw.text( (148,34) ,'-',font=font_38,fill=0)
        else:
            draw.text( (148,34) ,'+',font=font_38,fill=0)

        diffnono=tchbrnono-texter
        if diffnono<0:
            draw.text( (200,34) ,'-',font=font_38,fill=0)
        else:
            draw.text( (200,34) ,'+',font=font_38,fill=0)
        draw.text( (201,67) ,str(diffnono)+u'\u00B0',font=font_xtitle,fill=0)
        papirus.display(image)

    elif mode == 4:
        image = Image.open(img_folder+'wind-coy.png')
        draw = ImageDraw.Draw(image)
        draw.text( (23, 69) , val_wcoynelle, font=font_sbig, fill=0)
        draw.text( (101, 129) , val_wcoymax, font=font_big,fill=0)
        draw.text( (171, 72) , val_wcoydirec, font=font_big, fill=0)
        papirus.display(image)
    elif mode == 3:
        image = Image.open(img_folder+'home-all.png')
        trenddown = Image.open(img_folder+'arrow-down-small.png')
        trendup = Image.open(img_folder+'arrow-up-small.png')
        draw = ImageDraw.Draw(image)

        draw.text( (1,127) ,str(texter)+u'\u00B0',font=font_36,fill=0)
        if trend_text == '-':
             trendimage = Image.open(img_folder+'arrow-down.png')
             image.paste(trendimage,(10,36))  
        elif trend_text == '+':
             trendimage = Image.open(img_folder+'arrow-up.png')
             image.paste(trendimage,(10,36))  


        draw.text( (146,141) ,str(tsalon)+u'\u00B0',font=font_36,fill=0)
        if trend_text == '-':
             image.paste(trenddown,(114,142))  
        elif trend_text == '+':
             image.paste(trendup,(114,142))  

        draw.text( (146,103) ,str(ttv)+u'\u00B0',font=font_36,fill=0)
        if trend_ttv == '-':
             image.paste(trenddown,(114,100))  
        elif trend_ttv == '+':
             image.paste(trendup,(114,100))  

        draw.text( (114,65) ,str(tgrenier),font=font_26,fill=0)
        if trend_tgrenier == '-':
             image.paste(trenddown,(146,27))  
        elif trend_tgrenier == '+':
             image.paste(trendup,(146,27))  

        draw.text( (188,65) ,str(tchbrnono),font=font_26,fill=0)
        if trend_tchbrnono == '-':
             image.paste(trenddown,(186,27))  
        elif trend_tchbrnono == '+':
             image.paste(trendup,(186,27))  

        papirus.display(image)
    else:
        image = Image.new('1', papirus.size, 0)
        draw = ImageDraw.Draw(image)
        draw.text( (0, 40) , "something went wrong !", font=font_values, fill=1)
        papirus.display(image)

    if type == 'full':
        papirus.update()
    else:
        papirus.partial_update()

## ------------------------------------------------------------------------------
## Screen refresh function for Mode 7 to 10 (Humidity Control)  - button 2 
def refresh_screen7_10(type,mode):
    global pdouche 
    global phdouche 
    global pddouche 

    font_path = "/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf"
    font_xbig = ImageFont.truetype(font_path, 40)
    font_big = ImageFont.truetype(font_path, 34)
    font_title = ImageFont.truetype(font_path, 20)
    font_values = ImageFont.truetype(font_path, 16)
    font_small = ImageFont.truetype(font_path, 12)
    
    # initially set all white background
    # image = Image.new('1', papirus.size, 1)
    # draw = ImageDraw.Draw(image)

    # initially set a background image (size has to be 264 x 176)

    if mode == 7:
        image = Image.open(img_folder+'douche-time.png')
        draw = ImageDraw.Draw(image)
        val_tdouche,tdouche,trend_tdouche = get_temp(dz_tdouche_idx,pdouche)
        pdouche = tdouche
        val_hdouche,hdouche,trend_hdouche = get_hum(dz_tdouche_idx,phdouche)
        phdouche = hdouche

        # Get shower duration in minutes  
        val_ddouche = get_var("11")
        if val_ddouche !='0':
          pddouche=val_ddouche

        # Only refresh screen if duration is > 0 
        if val_ddouche !='0':
            draw.text( (125,5 ) , 'ON', font=font_xbig, fill=0)
            draw.text( (110, 131) , val_ddouche+' min', font=font_xbig, fill=0)
        else:
            draw.text( (125,5 ) , 'OFF', font=font_xbig, fill=0)
            draw.text( (110, 131) , str(pddouche)+' min', font=font_xbig, fill=0)

        now = datetime.now().strftime('%H:%M')
        draw.text( (25, 152) , now , font=font_title, fill=0)
    
    if mode == 8:
        image = Image.open(img_folder+'ipod-time.png')
        draw = ImageDraw.Draw(image)
        status,last_update,td = get_switch (dz_sipod_idx)
        totalstr='{0:.0f}'.format(round(td.total_seconds()/60,2))
        draw.text( (100,5 ) , status, font=font_xbig, fill=0)
        draw.text( (95, 55) , last_update.strftime('%H:%M - %d %b'), font=font_title, fill=0)
        draw.text( (100, 95) , totalstr+' min', font=font_big, fill=0)
 
    if mode == 9:
        image = Image.open(img_folder+'printer-time.png')
        draw = ImageDraw.Draw(image)
        status,last_update,td = get_switch (dz_sprinter_idx)
        totalstr='{0:.0f}'.format(round(td.total_seconds()/60,2))
        draw.text( (130,5 ) , status, font=font_xbig, fill=0)
        draw.text( (130, 55) , last_update.strftime('%H:%M - %d %b'), font=font_title, fill=0)
        draw.text( (130, 100) , totalstr+' min', font=font_big, fill=0)
        
    if mode == 10:
        image = Image.open(img_folder+'laptop-time.png')
        draw = ImageDraw.Draw(image)
        status,last_update,td = get_switch (dz_slaptop_idx)
        totalstr='{0:.0f}'.format(round(td.total_seconds()/60,2))
        draw.text( (140,5 ) , status, font=font_xbig, fill=0)
        draw.text( (140, 55) , last_update.strftime('%H:%M'), font=font_title, fill=0)
        draw.text( (140, 85) , last_update.strftime('%d %b'), font=font_title, fill=0)
        draw.text( (115, 110) , totalstr+' min', font=font_big, fill=0)


    papirus.display(image)

    if type == 'full':
          papirus.update()
    else:
          papirus.partial_update()
        
## ------------------------------------------------------------------------------
## Screen refresh function for Mode 4 to 6 (Wind)  - button 3

def refresh_screen4_6(type,mode):
    global pexter 
    global ptv 
    global pgrenier
    global pchbrnono 
    global psalon 
    global pdouche 
    global phdouche 

    # screen size is 264 x 176

    # Get latest values from Domoticz
    val_wcoynelle,val_wcoymax,val_wcoydirec = get_wind(dz_piou178_idx)
    val_wsenepi,val_wsenmax,val_wsendirec = get_wind(dz_piou378_idx)

    font_path = "/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf"
    font_xbig = ImageFont.truetype(font_path, 50)
    font_38 = ImageFont.truetype(font_path, 38)
    font_36 = ImageFont.truetype(font_path, 36)
    font_26 = ImageFont.truetype(font_path, 26)
    font_sbig = ImageFont.truetype(font_path, 34)
    font_big = ImageFont.truetype(font_path, 30)
    font_xtitle = ImageFont.truetype(font_path, 25)
    font_title = ImageFont.truetype(font_path, 20)
    font_values = ImageFont.truetype(font_path, 16)
    font_small = ImageFont.truetype(font_path, 12)

    now = datetime.now().strftime('%d %b %H:%M')
    strtime = datetime.now().strftime('%H:%M')

    #  Main - Temp Ext + Time + Wind
    if mode == 4:
        image = Image.open(img_folder+'wind-coy.png')
        draw = ImageDraw.Draw(image)
        draw.text( (23, 69) , val_wcoynelle, font=font_sbig, fill=0)
        draw.text( (101, 129) , val_wcoymax, font=font_big,fill=0)
        draw.text( (171, 72) , val_wcoydirec, font=font_big, fill=0)
        papirus.display(image)
    elif mode == 5:
        image = Image.open(img_folder+'wind-lac.png')
        draw = ImageDraw.Draw(image)
        draw.text( (17,36) , val_wsenepi, font=font_36, fill=0)
        draw.text( (131,148) , val_wsenmax, font=font_big,fill=0)
        winddirimage = Image.open(img_folder+val_wsendirec+'.png')
        image.paste(winddirimage,(17,82))  
        papirus.display(image)
    else:
        image = Image.new('1', papirus.size, 0)
        draw = ImageDraw.Draw(image)
        draw.text( (0, 40) , "something went wrong !", font=font_values, fill=1)
        papirus.display(image)

    if type == 'full':
        papirus.update()
    else:
        papirus.partial_update()
## ------------------------------------------------------------------------------
## Screen refresh function for Mode 31 
def refresh_screen31(type,mode):

    font_path = "/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf"
    font_xbig = ImageFont.truetype(font_path, 50)
    font_big = ImageFont.truetype(font_path, 30)
    font_title = ImageFont.truetype(font_path, 20)
    font_values = ImageFont.truetype(font_path, 16)
    font_small = ImageFont.truetype(font_path, 12)

    # initially set all white background
    image = Image.new('1', papirus.size, 1)
    draw = ImageDraw.Draw(image)

    chrono = chronoend - datetime.now()
    if chrono < timedelta(minutes = 0):
        chronotxt = strfdelta(chrono,'%M:%S')
    else:
        chronotxt = 'GAME OVER !'
    draw.text( (0, 40) , chronotxt, font=font_big, fill=0)

    now = datetime.now().strftime('%d %b %H:%M')
    draw.text( (0, 152) , "mode "+str(mode)+ " / "+now , font=font_small, fill=0)

    papirus.display(image)

    if type == 'full':
        papirus.update()
    else:
        papirus.partial_update()

## ------------------------------------------------------------------------------
## Screen refresh function for Homeworks [11 to 21]
def refresh_screen_homeworks(type,mode):

    font_path = "/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf"
    font_xbig = ImageFont.truetype(font_path, 50)
    font_big = ImageFont.truetype(font_path, 30)
    font_title = ImageFont.truetype(font_path, 20)
    font_values = ImageFont.truetype(font_path, 16)
    font_small = ImageFont.truetype(font_path, 12)

    # determine which item to display [0->10]
    item = mode - 11 
    # initially set all white background
    image = Image.open('201705181600-5.1.png')
    draw = ImageDraw.Draw(image)

    papirus.display(image)

    if type == 'full':
        papirus.update()
    else:
        papirus.partial_update()

##### MAIN ######
def main():
    #Intitialized GPO to use the papirus buttons
    GPIO.setmode(GPIO.BCM)

    GPIO.setup(SW1, GPIO.IN)
    GPIO.setup(SW2, GPIO.IN)
    GPIO.setup(SW3, GPIO.IN)
    GPIO.setup(SW4, GPIO.IN)


    ## Initially display mode 1 ...
    current_mode=3
    refresh_screen1_3('full',current_mode)

    ## set all current temp to 0 for trend 
    count = 0

    # ... then monitor button status to switch mode or refresh screen 
    # partially every 5 minutes to display up to date measures
    
    while True:

        # Mode in between 1 and 3: switch to display Temperature and Wind from domoticz
        # This is button on the UPPER LEFT of the screen
        # Screen will be refreshed every 5 minutes
        if GPIO.input(SW4) == False:
            if (current_mode > 0 and current_mode <3):
            	current_mode = current_mode +1
            else:
            	current_mode=1
            refresh_screen1_3('full',current_mode)
            count = 0
            
        # Mode in between 7 and 10: use along with the humidity control of the shower.
        # Display the state of switched too                          
        # This is the SECOND button FROM THE LEFT
        # Screen will be refreshed every minute
        elif GPIO.input(SW3) == False:
            if (current_mode > 6 and current_mode <10):
            	current_mode = current_mode +1
            else:
            	current_mode =7
            refresh_screen7_10('full',current_mode)
            count = 0
            
        # Mode in between 4 and 6
        # Display winds from domoticz 
        # This is the THIRD button FROM THE LEFT
        # Screen will be refreshed every 5 minutes
        elif GPIO.input(SW2) == False:
            if (current_mode > 3 and current_mode <6):
            	current_mode = current_mode +1
            else:
            	current_mode = 4
            refresh_screen4_6('full',current_mode)
            count = 0
            

        # This is button on the UPPER RIGHT of the screen
        # Mode = 11 to 21 
        # Display last 10 records from an xml feed (for example Homeworks for the kids) 
        elif GPIO.input(SW1) == False:
            if (current_mode > 10 and current_mode <21):
            	current_mode = current_mode +1
            else:
            	current_mode = 11

            refresh_screen_homeworks('full',current_mode)
            count = 0

        # Check if Mode has to be automatically switch based on Domoticz variable
        #else:
        # Get showerStarted variable 

        # mode [1-3] Refresh screen with current values from domoticz every ~5 minutes
        # mode [4-6] Refresh screen with current values from domoticz every ~5 minutes
        # mode [7-10] Refresh screen with current values from domoticz every ~1 minutes
        # mode [11-21]  Refresh scree from rss feed every ~20 minutes
        # mode [31]  Refresh every 1 sec

        count = count + 1
        if (current_mode == 31 and count > 10):
            count = 0
            refresh_screen31('partial',current_mode)
        elif (current_mode >=1 and current_mode <=3 and count > 3000):
            count = 0
            refresh_screen1_3('partial',current_mode)
        elif (current_mode >=4 and current_mode <=6 and count > 3000):
            count = 0
            refresh_screen4_6('partial',current_mode)    
        elif (current_mode >=7 and current_mode <=10 and count > 600):
            count = 0
            refresh_screen7_10('partial',current_mode)    
        elif (current_mode >=11 and current_mode <=21 and count > 1200):
            count = 0
            refresh_screen_homeworks('partial',current_mode)    
        time.sleep(0.1)

if __name__ == '__main__':
    main()
